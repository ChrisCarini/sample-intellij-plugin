buildscript {
    ext {
        javaVersion = '1.8'

        // see https://www.jetbrains.com/intellij-repository/releases/
        // and https://www.jetbrains.com/intellij-repository/snapshots/
        // To use/download EAP add '-EAP-SNAPSHOT' to the version, i.e. 'IU-191.6014.8-EAP-SNAPSHOT'
        intellijVersion = '2020.1'
//        intellijVersion = '201.6668.60-EAP-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.16'
}

group 'com.chriscarini.jetbrains'
version '0.2.1'

sourceCompatibility = javaVersion

repositories {
    mavenCentral()
}

test {
    useTestNG()
    useJUnit()
}

dependencies {
    testCompile 'org.testng:testng:6.1.1'
    testCompile "org.mockito:mockito-core:2.18.0"
}

intellij {
    version intellijVersion
    plugins[]
    pluginName 'sample-intellij-plugin'
}

//runIde {
//  jbrVersion 'jbrex8u202b1483.21'
//}

patchPluginXml {
    changeNotes """
        <h4>[0.2.1] - 2020-04-09</h4>
        <h5>Upgrade</h5>
        <ol>
        <li>Upgrading to 2020.1</li>
        </ol>
        <h5>Added</h5>
        <ol>
        <li>N/A</li>
        </ol>
        <h5>Fixed</h5>
        <ol>
        <li>N/A</li>
        </ol>
      """
}

// Set the respective compiler arguments to fail the build if there are warnings.
tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['-Xlint:all',
                                 '-Xlint:-options',
                                 '-Xlint:-rawtypes',
                                 '-Xlint:-processing',
                                 '-Xlint:-path', // Ignore JBR SDK manifest element warnings
                                 '-proc:none',
                                 '-Werror',
                                 '-Xlint:-classfile']) //ignore warnings from dependencies
}

if (System.getenv('IS_CI') != "True") {
    // The below file (jetbrainsCredentials.gradle) should contain the below:
    //    project.ext.set("intellijPublishUsername", "YOUR_USERNAME_HERE")
    //    project.ext.set("intellijPublishPassword", "YOUR_PASSWORD_HERE")
    //    project.ext.set("intellijPluginPublishToken", "YOUR_TOKEN_HERE")
    //
    // Because this contains the username and password, this file is also included in .gitignore file.
    apply from: 'jetbrainsCredentials.gradle'

    publishPlugin {
//    username intellijPublishUsername
//    password intellijPublishPassword
        token intellijPluginPublishToken
    }

    task checkJetBrainsCreds {
        doLast {
            println "Username: " + intellijPublishUsername
            println "Password " + (project.hasProperty('intellijPublishPassword') ? "IS" : "is NOT") + " set."
        }
    }
}